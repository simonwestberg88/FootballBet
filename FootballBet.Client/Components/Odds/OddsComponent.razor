@using FootballBet.Shared.Models.Odds
@using FootballBet.Client.Services
@inject IOddsService OddsService;

<MudThemeProvider @bind-IsDarkMode="@_isDarkMode" Theme="_theme"/>
<MudExpansionPanels>
    <MudText Typo="Typo.h5">Odds</MudText>
    <MudExpansionPanel Text="Home">
        @foreach (var odd in _homeOdds)
        {
            <MudPaper Style="display: flex; flex-direction: row; margin-bottom: 15px" Elevation="0">
                <MudPaper Style="width: 50%;">
                    <MudText Align="Align.Center">@odd.HomeTeamGoals - @odd.AwayTeamGoals</MudText>
                </MudPaper>
                <MudPaper Style="@($"background:{_theme.PaletteDark.Secondary}; width: 50%")">
                    <MudText Align="Align.Center">@odd.Odds</MudText>
                </MudPaper>
            </MudPaper>
        }
    </MudExpansionPanel>
    <MudExpansionPanel Text="Draw">
        @foreach (var odd in _drawOdds)
        {
            <MudPaper Style="display: flex; flex-direction: row; margin-bottom: 15px" Elevation="0">
                <MudPaper Style="width: 50%;">
                    <MudText Align="Align.Center">@odd.HomeTeamGoals - @odd.AwayTeamGoals</MudText>
                </MudPaper>
                <MudPaper Style="@($"background:{_theme.PaletteDark.Secondary}; width: 50%")">
                    <MudText Align="Align.Center">@odd.Odds</MudText>
                </MudPaper>
            </MudPaper>
        }
    </MudExpansionPanel>
    <MudExpansionPanel Text="Away">
        @foreach (var odd in _awayOdds)
        {
            <MudPaper Style="display: flex; flex-direction: row; margin-bottom: 15px" Elevation="0">
                <MudPaper Style="width: 50%;">
                    <MudText Align="Align.Center">@odd.HomeTeamGoals - @odd.AwayTeamGoals</MudText>
                </MudPaper>
                <MudPaper Style="@($"background:{_theme.PaletteDark.Secondary}; width: 50%")">
                    <MudText Align="Align.Center">@odd.Odds</MudText>
                </MudPaper>
            </MudPaper>
        }
    </MudExpansionPanel>
</MudExpansionPanels>

@code {

    [Parameter]
    public int MatchId { get; set; }

    [Parameter]
    public List<OddsDto>? Odds { get; set; }

    private bool _isDarkMode = true;
    private MudTheme _theme = new();

    private List<OddsDto> _odds = new();
    private static List<OddsDto>? _homeOdds;
    private static List<OddsDto>? _awayOdds;
    private static List<OddsDto>? _drawOdds;
    private static OddsDto _homeWinner;
    private static OddsDto _awayWinner;
    private static OddsDto _draw;


    protected override async Task OnInitializedAsync()
    {
        _odds = (await OddsService.GetOdds(MatchId) ?? Array.Empty<OddsDto>()).ToList();
        _homeOdds = _odds.Where(o => o.MatchWinner == MatchWinnerEnumDto.Home).ToList();
        _awayOdds = _odds.Where(o => o.MatchWinner == MatchWinnerEnumDto.Away).ToList();
        _drawOdds = _odds.Where(o => o.MatchWinner == MatchWinnerEnumDto.Draw).ToList();
        await base.OnInitializedAsync();
    }

}