@using FootballBet.Shared.Models.Odds
@using FootballBet.Client.Services
@using FootballBet.Shared.Models.Bets
@inject IBetService BetService;
@inject NavigationManager MyNavigationManager;

<MudDialog>
    <DialogContent>
        @if (_betPlaced)
        {
            <MudText>Bet already placed on match</MudText>
        }
        else
        {
            <MudText> Score @Odds.HomeTeamGoals - @Odds.AwayTeamGoals</MudText>
            <MudText style="@($"background:{_theme.PaletteDark.Secondary};")">@Odds.Odds</MudText>
        }
    </DialogContent>
    <DialogActions>
        @if (_betPlaced)
        {
        <MudButton OnClick="Cancel">Close</MudButton>
        }
        else
        {
            <MudButton OnClick="Cancel">Cancel</MudButton>
            <MudButton Color="Color.Primary" OnClick="Submit">Ok</MudButton>
        }
    </DialogActions>

</MudDialog>

@code {
    private readonly MudTheme _theme = new();
    private bool _betPlaced;
    private string _groupId;

    [CascadingParameter]
    MudDialogInstance MudDialog { get; set; }

    [Parameter]
    public OddsDto Odds { get; set; }

    [Parameter]
    public int MatchId { get; set; }
    [Parameter] public EventCallback<BetResponse> UserHasMadeBet { get; set; }

    private async Task Submit()
    {
        var response = await BetService.PlaceBetAsync(Odds.Id, MatchId, amount: 100, _groupId);
        await UserHasMadeBet.InvokeAsync(new BetResponse{Amount = 100, OddsId = Odds.Id, PotentialWin = response.PotentialWin});
        MudDialog.Close(DialogResult.Ok(true));
        StateHasChanged();
    }

    protected override async Task OnInitializedAsync()
    {
        _groupId = MyNavigationManager.Uri.Split("/").Last();
        var userBet = await BetService.GetBetAsync(MatchId, _groupId);
        if (userBet is not null)
        {
            _betPlaced = true;
        }
        await base.OnInitializedAsync();
    }

    void Cancel() => MudDialog.Cancel();
}