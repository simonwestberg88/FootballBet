@using FootballBet.Shared.Models.Odds
@using FootballBet.Client.Services
@using FootballBet.Shared.Models.Bets
@inject IBetService BetService;
@inject NavigationManager MyNavigationManager;

<MudDialog>
    <DialogContent>
        <MudText> Score: @ExactScoreOdds.HomeTeamGoals - @ExactScoreOdds.AwayTeamGoals</MudText>
        <MudText style="@($"background:{_theme.Palette.Secondary};")">Odds: @ExactScoreOdds.Odds</MudText>
    </DialogContent>
    <DialogActions>
        <MudButton OnClick="Cancel">Cancel</MudButton>
        <MudButton Color="Color.Primary" OnClick="Submit">Ok</MudButton>
    </DialogActions>

</MudDialog>

@code {
    private readonly MudTheme _theme = new() //conflict when cascading theme
        {
            Palette = new()
            {
                Primary = "8CB369",
                Secondary = "92D5E6",
                AppbarBackground = "F0A868"
            }
        };

    private string _groupId;

    [CascadingParameter]
    MudDialogInstance MudDialog { get; set; }

    [Parameter]
    public ExactScoreOddsDto ExactScoreOdds { get; set; }

    [Parameter]
    public int MatchId { get; set; }

    [Parameter]
    public EventCallback<BetResponse> UserHasMadeBet { get; set; }

    private async Task Submit()
    {
        var response = await BetService.PlaceBetAsync(ExactScoreOdds.Id, MatchId, amount: 100, _groupId);
        await UserHasMadeBet.InvokeAsync(response);
        MudDialog.Close(DialogResult.Ok(true));
    }

    protected override async Task OnInitializedAsync()
    {
        _groupId = MyNavigationManager.Uri.Split("/").Last();
        await base.OnInitializedAsync();
    }

    void Cancel() => MudDialog.Cancel();
}