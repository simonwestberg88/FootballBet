@using FootballBet.Shared.Models.Stats
@using FootballBet.Shared.Models.Users
@inject HttpClient Http

    @if(GameDayStat != null)
    {
        <MudChart ChartType="ChartType.Line" ChartSeries="@Series"  XAxisLabels="@XAxisLabels" Width="100%" Height="700px" ChartOptions="chartOptions"></MudChart>
    }

@code {
    [Parameter]
    public string? ThisGroupId { get; set; }
    private GameDayStatsContainerShared GameDayStat { get; set; }
    public ChartOptions chartOptions = new ChartOptions();

    public List<ChartSeries> Series = new List<ChartSeries>();

    public string[] XAxisLabels = new string[] { };

    Random random = new Random();
    protected override async Task OnInitializedAsync()
    {
        GameDayStat = await Http.GetFromJsonAsync<GameDayStatsContainerShared>($"/groupStats/{ThisGroupId}") ?? new();
        CreateSeries(GameDayStat.GameDayStats, GameDayStat.Members);
        CreateXAxis(GameDayStat.GameDates);
        StateHasChanged();
    }

    private void CreateSeries(List<GameDayStatsShared> gameDayStats, List<UserDto> members)
    {
        var series = new List<ChartSeries>();
        foreach (var member in members)
        {
            var memberGameDays = gameDayStats.OrderBy(d => d.Date).SelectMany(c => c.MemberGameDayStats.Select(x => x).Where(m => m.User.Id == member.Id));
            var listOfWinningsPerDay = new List<double>();
            var totalWinningsSoFar = 0d;
            foreach (var matchDay in memberGameDays)
            {
                listOfWinningsPerDay.Add((double)matchDay.TotalWinningsForDay + totalWinningsSoFar);
                totalWinningsSoFar += (double)matchDay.TotalWinningsForDay;
            }
            var chartSeriesForMember = new ChartSeries()
                {
                    Name = member.UserName,
                    Data = listOfWinningsPerDay.ToArray()
                };
            series.Add(chartSeriesForMember);
        }
        Series = series;
    }

    private void CreateXAxis(List<DateTime> gameDates)
    {
        XAxisLabels = gameDates.Select(d => d.ToString("dd/MM")).ToArray();
    }
    
}