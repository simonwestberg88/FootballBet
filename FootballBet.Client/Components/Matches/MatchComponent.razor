@using FootballBet.Shared.Models.Match
@using FootballBet.Shared.Models.Odds
@using FootballBet.Client.Services
@using FootballBet.Shared.Models.Bets
@using NuGet.Common
@inject IOddsService OddsService;
@inject IBetService BetService;
@inject NavigationManager MyNavigationManager;

<MudPaper Elevation="2" Style="margin-top: 10px">
    <MudExpansionPanel @bind-IsExpanded="_isOpen" @onclick="GetOddsForGame" HideIcon="true">
        <TitleContent>
            <MudGrid>
                <MudItem xs="3" Style="display: flex; flex-direction: column; justify-content: center; align-items: center">
                    <MudText>@MatchData.HomeTeamName</MudText>
                    <MudImage Src="@MatchData.HomeTeamLogo" Width="Width" Height="Height"></MudImage>
                </MudItem>
                <MudItem xs="6" Style="display: flex; justify-content: center; align-items: center">
                    <MudItem style="display: block">
                        <MudText Style="text-align: center">@MatchData.Date.ToString("H:mm")</MudText>
                        <MudText Style="text-align: center">@MatchData.HomeCurrentGoals - @MatchData.AwayCurrentGoals</MudText>
                    </MudItem>
                </MudItem>
                <MudItem xs="3" Style="display: flex; flex-direction: column; justify-content: center; align-items: center">
                    <MudText>@MatchData.AwayTeamName</MudText>
                    <MudImage Src="@MatchData.AwayTeamLogo" Width="Width" Height="Height"></MudImage>
                </MudItem>
            </MudGrid>
            @if (UserBet is not null)
            {
                <MudText>My bet: @UserBet.Value.Amount</MudText>
                <MudText>Potential Win: @UserBet.Value.PotentialWin</MudText>
            }
        </TitleContent>
        <ChildContent>
            <MudText Style="padding-top: 10px">@(MatchData.MatchStatus)</MudText>
            @if (Odds != null)
            {
                <MudDivider Style="margin-top: 10px; margin-bottom: 10px" />
                <MudText Typo="Typo.h6" Style="padding-top: 10px">Base Odds</MudText>
                <OddsMatchWinnerComponent
                    HomeOdds="@_homeOdds.OrderBy(o => o.Odds).FirstOrDefault().Odds"
                    AwayOdds="@_awayOdds.OrderBy(o => o.Odds).FirstOrDefault().Odds"
                    DrawOdds="@_drawOdds.OrderBy(o => o.Odds).FirstOrDefault().Odds"/>
                <MudDivider Style="margin-top: 10px; margin-bottom: 10px" />
                <MudText Typo="Typo.h6">Exact odds</MudText>
                <MudExpansionPanels>
                    <MudExpansionPanel Text="Home">
                        <OddsListComponent Odds="_homeOdds" MatchId="MatchData.MatchId"/>
                    </MudExpansionPanel>
                    <MudExpansionPanel Text="Draw">
                        <OddsListComponent Odds="_drawOdds" MatchId="MatchData.MatchId"/>
                    </MudExpansionPanel>
                    <MudExpansionPanel Text="Away">
                        <OddsListComponent Odds="_awayOdds" MatchId="MatchData.MatchId"/>a
                    </MudExpansionPanel>
                </MudExpansionPanels>
            }
        </ChildContent>
    </MudExpansionPanel>
</MudPaper>

@code {

    [Parameter]
    public MatchDto MatchData { get; set; }

    private List<OddsDto>? Odds { get; set; }
    private static List<OddsDto>? _homeOdds;
    private static List<OddsDto>? _awayOdds;
    private static List<OddsDto>? _drawOdds;
    
    private BetResponse? UserBet { get; set; }

    bool _isOpen;
    bool _hasLoadedOddsForGame;

    private static int Width => 50;
    private int Height => 50;

    private async void GetOddsForGame()
    {
        if (!_hasLoadedOddsForGame)
        {
            Odds = (await OddsService.GetOdds(MatchData.MatchId) ?? Array.Empty<OddsDto>()).ToList();
            _homeOdds = Odds.Where(o => o.MatchWinner == MatchWinnerEnumDto.Home).OrderBy(o => o.Odds).Skip(1).ToList();
            _awayOdds = Odds.Where(o => o.MatchWinner == MatchWinnerEnumDto.Away).OrderBy(o => o.Odds).Skip(1).ToList();
            _drawOdds = Odds.Where(o => o.MatchWinner == MatchWinnerEnumDto.Draw).OrderBy(o => o.Odds).Skip(1).ToList();
            StateHasChanged();
        }
        _hasLoadedOddsForGame = true;
    }

    private OddsDto _selectedOdds;


    private bool _isDarkMode = true;
    private readonly MudTheme _theme = new();

    protected override async Task OnInitializedAsync()
    {
        UserBet = await BetService.GetBetAsync(MatchData.MatchId, MyNavigationManager.Uri.Split("/").Last());
        await base.OnInitializedAsync();
    }

    MudListItem selectedItem;
    object selectedValue = 1;
}