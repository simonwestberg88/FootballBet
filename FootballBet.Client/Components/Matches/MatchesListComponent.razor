@using FootballBet.Shared.Models.Match
@using FootballBet.Client.Services


<MudPaper>
    <MudList>
        @foreach (var round in _matches.Select(m => m.Round).Distinct())
        {
            @if (_matches.Where(g => g.Round == round).All(m => IsMatchFinished(m.MatchStatus)) && HideFinishedGames)
            {
                continue;
            }
            <div align="center">
                <MudText Typo="Typo.h4">@round</MudText>
                @foreach (var date in GetUniqueDatesForRound(round))
                {
                    @if (_matches.Where(g => g.Date.Date == date).All(m => IsMatchFinished(m.MatchStatus)) && HideFinishedGames)
                    {
                        continue;
                    }
                    <MudText Typo="Typo.h5">@date.Date.ToString("dd/MM/yyyy")</MudText>
                    <Virtualize Items="@GetGamesForDate(date)" Context="game">
                        <MudListItem class="px-0" Style="@(IsMatchFinished(game.MatchStatus) && HideFinishedGames ? "display:none" : "")">
                            <MatchComponent MatchData="@game"></MatchComponent>
                        </MudListItem>                        
                    </Virtualize>
                }
            </div>
        }
    </MudList>
</MudPaper>

@code {
    [Parameter]
    public List<MatchDto> _matches { get; set; } = new List<MatchDto>();
    [Parameter]
    public bool HideFinishedGames { get; set; }

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
    }

    private List<DateTime> GetUniqueDatesForRound(string round)
        => _matches.Where(m => m.Round == round).Select(m => m.Date.Date).OrderBy(m => m.Date).Distinct().ToList();


    private List<MatchDto> GetGamesForDate(DateTime date)
        => _matches.Where(m => m.Date.Date == date.Date).OrderBy(m => m.Date).ToList();

    private bool IsMatchFinished(string status)
        => status.ToLower() switch
        {
            "live" => false,
            "not started" => false,
            "first half" => false,
            "second half" => false,
            "extra time" => false,
            "penalty" => false,
            "Break Time (in Extra Time)" => false,
            _ => true
        };

}