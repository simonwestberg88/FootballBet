@page "/bettingGroupOld"
@using FootballBet.Client.Components.Groups
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Components.WebAssembly.Authentication
@using FootballBet.Shared
@using FootballBet.Shared.Models.Groups
@attribute [Authorize]
@inject HttpClient Http

<!--This page can only be accessed manually whilst it is being reworked-->
<PageTitle>Create Betting Group</PageTitle>

<h1>Create Betting Group</h1>

<CreateGroupComponent></CreateGroupComponent>


<h1>Invite member</h1>
<EditForm Model="@bettingGroupInvitation" OnValidSubmit="@HandleCreateInvitation">
    <DataAnnotationsValidator />
    <ValidationSummary />
    <label>Group Id</label>
    <InputText id="groupId" @bind-Value="bettingGroupInvitation.BettingGroupId" />
    <label>Email to invited user</label>
    <InputText id="invitedEmail" @bind-Value="bettingGroupInvitation.InvitedUserEmail" />
    <button type="submit">Ok</button>
</EditForm>
@if (bettingGroups == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>Name</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var group in bettingGroups)
            {
                <tr>
                    <td>@group.Name</td>
                    <td>@group.Description</td>
                    <td>@group.Id</td>
                </tr>
            }
        </tbody>
    </table>
}


@code {
    private List<BettingGroupShared> bettingGroups = new();
    private BettingGroupInvitationShared bettingGroupInvitation = new();

    
    private async void HandleCreateInvitation()
    {
        var invitation = await Http.PostAsJsonAsync("/group/invitation", bettingGroupInvitation);
        //add something to indicate invitation has been sent
    }

    protected override async Task OnInitializedAsync()
    {

        try
        {
            bettingGroups = await Http.GetFromJsonAsync<List<BettingGroupShared>>("/group") ?? new();
            await Http.GetAsync("/FootballLeague");
        }
        catch (AccessTokenNotAvailableException exception)
        {
            exception.Redirect();
        }
    }
}
