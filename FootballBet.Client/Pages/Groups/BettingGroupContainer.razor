@page "/BettingGroup/{groupId}"
@using FootballBet.Client.Components.Groups
@using FootballBet.Client.Components.Matches
@using FootballBet.Client.Components.Stats
@using FootballBet.Client.Services
@using FootballBet.Shared.Models.Groups
@using FootballBet.Shared.Models.Match
@inject HttpClient Http
@inject IMatchService MatchService



<MudTabs Elevation="1" Rounded="true" Centered="true" PanelClass="pa-0">
    <MudTabPanel Icon="@Icons.Filled.Scoreboard" class="px-0">
        <ChildContent>
        <MudCheckBox @bind-Checked="@CheckboxHideFinishedGames" Label="Hide finished games" Color="Color.Primary"></MudCheckBox>
            <MatchesListComponent _matches="_matches" HideFinishedGames="CheckboxHideFinishedGames"></MatchesListComponent>
        </ChildContent>
    </MudTabPanel>
    <MudTabPanel Icon="@Icons.Filled.FormatListNumbered" class="px-0">
        <ChildContent>
            <StatsComponent ThisGroupId="@GroupId"></StatsComponent>
        </ChildContent>
    </MudTabPanel>
    <MudTabPanel Icon="@Icons.Filled.Settings" class="px-0">
        <ChildContent>
            @if (HasGottenGroup && BettingGroup.CurrentUserIsAdmin)
            {
                <InviteMemberToGroupComponent ThisGroupId="@GroupId"></InviteMemberToGroupComponent>
            }
            <ChangeNicknameComponent ThisGroupId="@GroupId"></ChangeNicknameComponent>
        </ChildContent>
    </MudTabPanel>
</MudTabs>

@code {
    [Parameter]
    public string? GroupId { get; set; }
    private BettingGroupShared BettingGroup { get; set; }
    private bool HasGottenGroup;
    private List<MatchDto> _matches = new List<MatchDto>();
    private bool CheckboxHideFinishedGames { get; set; } = true;

    protected override async Task OnInitializedAsync()
    {
        BettingGroup = await Http.GetFromJsonAsync<BettingGroupShared>($"/group/{GroupId}") ?? new();
        HasGottenGroup = true;
        _matches = (await MatchService.GetMatchesAsync()).OrderBy(m => m.Date).ToList();
        StateHasChanged();
    }
}
